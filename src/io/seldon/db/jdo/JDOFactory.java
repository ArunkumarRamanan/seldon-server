/*
 * Seldon -- open source prediction engine
 * =======================================
 *
 * Copyright 2011-2015 Seldon Technologies Ltd and Rummble Ltd (http://www.seldon.io/)
 *
 * ********************************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ********************************************************************************************
 */

/* Generated by Together */

package io.seldon.db.jdo;

import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

import javax.jdo.JDOHelper;
import javax.jdo.PersistenceManager;
import javax.jdo.PersistenceManagerFactory;
import javax.naming.NamingException;

import org.apache.log4j.Logger;

import io.seldon.api.Constants;
import io.seldon.db.jdbc.JDBCConnectionFactory;

public class JDOFactory 
{
	private static Logger logger = Logger.getLogger( JDOFactory.class.getName() );

    private static JDOPMRetriever pmRet = new JDOPMRetriever();
    private static Map<String, PersistenceManagerFactory> factories = new ConcurrentHashMap<String, PersistenceManagerFactory>();
    private static Map<String,String>  clientJNDINames = new ConcurrentHashMap<String,String>();
    private static Map<String,String>  clientToDBName = new ConcurrentHashMap<String,String>();
    public static void initialise(Properties props, Properties jdoProperties) throws NamingException {
        for (Object key : jdoProperties.keySet()) {
            String dbKey = (String) key;
            String value = jdoProperties.getProperty(dbKey);
            String[] values = value.split(",");
            String connectionFactoryName = null;
            String dbName = null;
            if (values.length == 1)
            {
            	dbName = dbKey;
            	connectionFactoryName = value;
            }
            else if (values.length == 2)
            {
            	dbName = values[0];
            	connectionFactoryName = values[1];
            }
            else
            	throw new JDOStartupException("Bad jdofactories.properties file");
            
            clientJNDINames.put(dbKey, connectionFactoryName);
            clientToDBName.put(dbKey, dbName);
            registerFactory(props, dbKey, dbName, connectionFactoryName);
        }
        JDBCConnectionFactory.initialise(clientJNDINames,clientToDBName);
    }
    
    public static String getJNDIForClient(String client)
    {
    	return clientJNDINames.get(client);
    }

    public static void initialise(Properties jdoProperties, String clientName, String databaseName, String jndiResource) throws NamingException {
    	if (databaseName == null)
    		databaseName = clientName;
        registerFactory(jdoProperties, clientName, databaseName, jndiResource);
        clientJNDINames.put(clientName, jndiResource);
        clientToDBName.put(clientName, databaseName);
        JDBCConnectionFactory.initialise(clientJNDINames,clientToDBName);
    }

    private static void registerFactory(Properties connectionProperties, String clientName, String databaseName, String jndiResource) {
    	connectionProperties.setProperty("javax.jdo.option.ConnectionFactoryName", jndiResource);
    	if (databaseName != null)
    		connectionProperties.setProperty("datanucleus.mapping.Catalog", databaseName);
    	logger.info("Adding PMF factory for client "+clientName+" with database "+databaseName+" with JNDI Datasource:"+jndiResource);
        PersistenceManagerFactory factory = JDOHelper.getPersistenceManagerFactory(connectionProperties);
        factories.put(clientName, factory);
    }

    /**
	 * 	Return the singleton persistence manager factory instance.
	 */
	public static synchronized PersistenceManagerFactory getPersistenceManagerFactory ()
	{
		if (factories.size() == 1)
			return factories.values().iterator().next();
		else
			return null;
	}

	public static boolean isDefaultClient(String key)
	{
		return !factories.containsKey(key);
	}
    
	public static PersistenceManager getPersistenceManager(String key)
    {
	    PersistenceManagerFactory pmf = factories.get(key);
	    if (pmf == null)
	    {
	    	pmf = factories.get(Constants.DEFAULT_CLIENT);
	    }
	    if (pmf != null)
	    {
	    	PersistenceManager pm = (PersistenceManager) pmRet.getPersistenceManager(key,pmf);
	    	if (!pm.currentTransaction().isActive())
	    		TransactionPeer.startReadOnlyTransaction(pm);
	    	return pm;
	    }
	    else
	    	return null;
    }
    
    public static void cleanupPM()
    {
        pmRet.cleanup();
    }

}
